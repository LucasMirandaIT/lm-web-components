/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface LmButton {
        "color": string;
        "type": string;
    }
    interface LmDialog {
        "modalTitle": string;
        "showCancelButton": boolean;
        "showCloseButton": boolean;
        "showConfirmButton": boolean;
        "type": string;
    }
    interface LmLogin {
        /**
          * Props below
         */
        "form": Array<any>;
    }
    interface LmRegister {
    }
    interface LmTable {
        "data": { id: number; nome: string; sobrenome: string; }[];
        "showEditColumn": boolean;
        "showRemoveColumn": boolean;
    }
    interface LmTabs {
        "tabs": any;
    }
    interface LoginContainer {
    }
    interface OutlinedInput {
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface PasswordOutlinedInput {
        "placeholder": string;
        "type": string;
        "value": string;
    }
    interface TablePagination {
        "currentPage": number;
        "pageSize": any;
        "siblingCount": number;
        "totalCount": any;
    }
}
export interface LmButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLmButtonElement;
}
export interface LmLoginCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLmLoginElement;
}
export interface LmRegisterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLmRegisterElement;
}
export interface LoginContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLoginContainerElement;
}
export interface OutlinedInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOutlinedInputElement;
}
export interface PasswordOutlinedInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPasswordOutlinedInputElement;
}
export interface TablePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTablePaginationElement;
}
declare global {
    interface HTMLLmButtonElement extends Components.LmButton, HTMLStencilElement {
    }
    var HTMLLmButtonElement: {
        prototype: HTMLLmButtonElement;
        new (): HTMLLmButtonElement;
    };
    interface HTMLLmDialogElement extends Components.LmDialog, HTMLStencilElement {
    }
    var HTMLLmDialogElement: {
        prototype: HTMLLmDialogElement;
        new (): HTMLLmDialogElement;
    };
    interface HTMLLmLoginElement extends Components.LmLogin, HTMLStencilElement {
    }
    var HTMLLmLoginElement: {
        prototype: HTMLLmLoginElement;
        new (): HTMLLmLoginElement;
    };
    interface HTMLLmRegisterElement extends Components.LmRegister, HTMLStencilElement {
    }
    var HTMLLmRegisterElement: {
        prototype: HTMLLmRegisterElement;
        new (): HTMLLmRegisterElement;
    };
    interface HTMLLmTableElement extends Components.LmTable, HTMLStencilElement {
    }
    var HTMLLmTableElement: {
        prototype: HTMLLmTableElement;
        new (): HTMLLmTableElement;
    };
    interface HTMLLmTabsElement extends Components.LmTabs, HTMLStencilElement {
    }
    var HTMLLmTabsElement: {
        prototype: HTMLLmTabsElement;
        new (): HTMLLmTabsElement;
    };
    interface HTMLLoginContainerElement extends Components.LoginContainer, HTMLStencilElement {
    }
    var HTMLLoginContainerElement: {
        prototype: HTMLLoginContainerElement;
        new (): HTMLLoginContainerElement;
    };
    interface HTMLOutlinedInputElement extends Components.OutlinedInput, HTMLStencilElement {
    }
    var HTMLOutlinedInputElement: {
        prototype: HTMLOutlinedInputElement;
        new (): HTMLOutlinedInputElement;
    };
    interface HTMLPasswordOutlinedInputElement extends Components.PasswordOutlinedInput, HTMLStencilElement {
    }
    var HTMLPasswordOutlinedInputElement: {
        prototype: HTMLPasswordOutlinedInputElement;
        new (): HTMLPasswordOutlinedInputElement;
    };
    interface HTMLTablePaginationElement extends Components.TablePagination, HTMLStencilElement {
    }
    var HTMLTablePaginationElement: {
        prototype: HTMLTablePaginationElement;
        new (): HTMLTablePaginationElement;
    };
    interface HTMLElementTagNameMap {
        "lm-button": HTMLLmButtonElement;
        "lm-dialog": HTMLLmDialogElement;
        "lm-login": HTMLLmLoginElement;
        "lm-register": HTMLLmRegisterElement;
        "lm-table": HTMLLmTableElement;
        "lm-tabs": HTMLLmTabsElement;
        "login-container": HTMLLoginContainerElement;
        "outlined-input": HTMLOutlinedInputElement;
        "password-outlined-input": HTMLPasswordOutlinedInputElement;
        "table-pagination": HTMLTablePaginationElement;
    }
}
declare namespace LocalJSX {
    interface LmButton {
        "color"?: string;
        "onHandleClick"?: (event: LmButtonCustomEvent<unknown>) => void;
        "type"?: string;
    }
    interface LmDialog {
        "modalTitle"?: string;
        "showCancelButton"?: boolean;
        "showCloseButton"?: boolean;
        "showConfirmButton"?: boolean;
        "type"?: string;
    }
    interface LmLogin {
        /**
          * Props below
         */
        "form"?: Array<any>;
        "onHandleLogin"?: (event: LmLoginCustomEvent<unknown>) => void;
    }
    interface LmRegister {
        /**
          * Props below
         */
        "onHandleLogin"?: (event: LmRegisterCustomEvent<unknown>) => void;
    }
    interface LmTable {
        "data"?: { id: number; nome: string; sobrenome: string; }[];
        "showEditColumn"?: boolean;
        "showRemoveColumn"?: boolean;
    }
    interface LmTabs {
        "tabs"?: any;
    }
    interface LoginContainer {
        /**
          * Props below
         */
        "onHandleLogin"?: (event: LoginContainerCustomEvent<unknown>) => void;
    }
    interface OutlinedInput {
        "onChangeInput"?: (event: OutlinedInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface PasswordOutlinedInput {
        "onChangeInput"?: (event: PasswordOutlinedInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "type"?: string;
        "value"?: string;
    }
    interface TablePagination {
        "currentPage"?: number;
        "onPageChange"?: (event: TablePaginationCustomEvent<number>) => void;
        "pageSize"?: any;
        "siblingCount"?: number;
        "totalCount"?: any;
    }
    interface IntrinsicElements {
        "lm-button": LmButton;
        "lm-dialog": LmDialog;
        "lm-login": LmLogin;
        "lm-register": LmRegister;
        "lm-table": LmTable;
        "lm-tabs": LmTabs;
        "login-container": LoginContainer;
        "outlined-input": OutlinedInput;
        "password-outlined-input": PasswordOutlinedInput;
        "table-pagination": TablePagination;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lm-button": LocalJSX.LmButton & JSXBase.HTMLAttributes<HTMLLmButtonElement>;
            "lm-dialog": LocalJSX.LmDialog & JSXBase.HTMLAttributes<HTMLLmDialogElement>;
            "lm-login": LocalJSX.LmLogin & JSXBase.HTMLAttributes<HTMLLmLoginElement>;
            "lm-register": LocalJSX.LmRegister & JSXBase.HTMLAttributes<HTMLLmRegisterElement>;
            "lm-table": LocalJSX.LmTable & JSXBase.HTMLAttributes<HTMLLmTableElement>;
            "lm-tabs": LocalJSX.LmTabs & JSXBase.HTMLAttributes<HTMLLmTabsElement>;
            "login-container": LocalJSX.LoginContainer & JSXBase.HTMLAttributes<HTMLLoginContainerElement>;
            "outlined-input": LocalJSX.OutlinedInput & JSXBase.HTMLAttributes<HTMLOutlinedInputElement>;
            "password-outlined-input": LocalJSX.PasswordOutlinedInput & JSXBase.HTMLAttributes<HTMLPasswordOutlinedInputElement>;
            "table-pagination": LocalJSX.TablePagination & JSXBase.HTMLAttributes<HTMLTablePaginationElement>;
        }
    }
}
